/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_LIST_H
#define _MOCK_LIST_H

#include "List.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_List_Init(void);
void mock_List_Destroy(void);
void mock_List_Verify(void);




#define ListInit_Ignore() ListInit_CMockIgnore()
void ListInit_CMockIgnore(void);
#define ListInit_Expect(list, id_type) ListInit_CMockExpect(__LINE__, list, id_type)
void ListInit_CMockExpect(UNITY_LINE_TYPE cmock_line, LinkedList_t* list, IdGroup_t id_type);
typedef void (* CMOCK_ListInit_CALLBACK)(LinkedList_t* list, IdGroup_t id_type, int cmock_num_calls);
void ListInit_StubWithCallback(CMOCK_ListInit_CALLBACK Callback);
#define ListDestroy_IgnoreAndReturn(cmock_retval) ListDestroy_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ListDestroy_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, OsResult_t cmock_to_return);
#define ListDestroy_ExpectAndReturn(list, cmock_retval) ListDestroy_CMockExpectAndReturn(__LINE__, list, cmock_retval)
void ListDestroy_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, LinkedList_t* list, OsResult_t cmock_to_return);
typedef OsResult_t (* CMOCK_ListDestroy_CALLBACK)(LinkedList_t* list, int cmock_num_calls);
void ListDestroy_StubWithCallback(CMOCK_ListDestroy_CALLBACK Callback);
#define ListLock_IgnoreAndReturn(cmock_retval) ListLock_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ListLock_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, OsResult_t cmock_to_return);
#define ListLock_ExpectAndReturn(list, mode, cmock_retval) ListLock_CMockExpectAndReturn(__LINE__, list, mode, cmock_retval)
void ListLock_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, LinkedList_t* list, U8_t mode, OsResult_t cmock_to_return);
typedef OsResult_t (* CMOCK_ListLock_CALLBACK)(LinkedList_t* list, U8_t mode, int cmock_num_calls);
void ListLock_StubWithCallback(CMOCK_ListLock_CALLBACK Callback);
#define ListUnlock_IgnoreAndReturn(cmock_retval) ListUnlock_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ListUnlock_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, OsResult_t cmock_to_return);
#define ListUnlock_ExpectAndReturn(list, cmock_retval) ListUnlock_CMockExpectAndReturn(__LINE__, list, cmock_retval)
void ListUnlock_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, LinkedList_t* list, OsResult_t cmock_to_return);
typedef OsResult_t (* CMOCK_ListUnlock_CALLBACK)(LinkedList_t* list, int cmock_num_calls);
void ListUnlock_StubWithCallback(CMOCK_ListUnlock_CALLBACK Callback);
#define ListIsLocked_IgnoreAndReturn(cmock_retval) ListIsLocked_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ListIsLocked_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, _Bool cmock_to_return);
#define ListIsLocked_ExpectAndReturn(list, cmock_retval) ListIsLocked_CMockExpectAndReturn(__LINE__, list, cmock_retval)
void ListIsLocked_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, LinkedList_t* list, _Bool cmock_to_return);
typedef _Bool (* CMOCK_ListIsLocked_CALLBACK)(LinkedList_t* list, int cmock_num_calls);
void ListIsLocked_StubWithCallback(CMOCK_ListIsLocked_CALLBACK Callback);
#define ListSort_IgnoreAndReturn(cmock_retval) ListSort_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ListSort_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, OsResult_t cmock_to_return);
#define ListSort_ExpectAndReturn(list, sort_type, cmock_retval) ListSort_CMockExpectAndReturn(__LINE__, list, sort_type, cmock_retval)
void ListSort_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, LinkedList_t* list, U8_t sort_type, OsResult_t cmock_to_return);
typedef OsResult_t (* CMOCK_ListSort_CALLBACK)(LinkedList_t* list, U8_t sort_type, int cmock_num_calls);
void ListSort_StubWithCallback(CMOCK_ListSort_CALLBACK Callback);
#define ListMerge_IgnoreAndReturn(cmock_retval) ListMerge_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ListMerge_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, OsResult_t cmock_to_return);
#define ListMerge_ExpectAndReturn(list_x, list_y, cmock_retval) ListMerge_CMockExpectAndReturn(__LINE__, list_x, list_y, cmock_retval)
void ListMerge_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, LinkedList_t* list_x, LinkedList_t* list_y, OsResult_t cmock_to_return);
typedef OsResult_t (* CMOCK_ListMerge_CALLBACK)(LinkedList_t* list_x, LinkedList_t* list_y, int cmock_num_calls);
void ListMerge_StubWithCallback(CMOCK_ListMerge_CALLBACK Callback);
#define ListSearch_IgnoreAndReturn(cmock_retval) ListSearch_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ListSearch_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, ListNode_t* cmock_to_return);
#define ListSearch_ExpectAndReturn(list, id, cmock_retval) ListSearch_CMockExpectAndReturn(__LINE__, list, id, cmock_retval)
void ListSearch_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, LinkedList_t* list, Id_t id, ListNode_t* cmock_to_return);
typedef ListNode_t* (* CMOCK_ListSearch_CALLBACK)(LinkedList_t* list, Id_t id, int cmock_num_calls);
void ListSearch_StubWithCallback(CMOCK_ListSearch_CALLBACK Callback);
#define ListSearchLinear_IgnoreAndReturn(cmock_retval) ListSearchLinear_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ListSearchLinear_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, ListNode_t* cmock_to_return);
#define ListSearchLinear_ExpectAndReturn(list, id, cmock_retval) ListSearchLinear_CMockExpectAndReturn(__LINE__, list, id, cmock_retval)
void ListSearchLinear_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, LinkedList_t* list, Id_t id, ListNode_t* cmock_to_return);
typedef ListNode_t* (* CMOCK_ListSearchLinear_CALLBACK)(LinkedList_t* list, Id_t id, int cmock_num_calls);
void ListSearchLinear_StubWithCallback(CMOCK_ListSearchLinear_CALLBACK Callback);
#define ListSizeGet_IgnoreAndReturn(cmock_retval) ListSizeGet_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ListSizeGet_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, ListSize_t cmock_to_return);
#define ListSizeGet_ExpectAndReturn(list, cmock_retval) ListSizeGet_CMockExpectAndReturn(__LINE__, list, cmock_retval)
void ListSizeGet_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, LinkedList_t* list, ListSize_t cmock_to_return);
typedef ListSize_t (* CMOCK_ListSizeGet_CALLBACK)(LinkedList_t* list, int cmock_num_calls);
void ListSizeGet_StubWithCallback(CMOCK_ListSizeGet_CALLBACK Callback);
#define ListIntegrityVerify_IgnoreAndReturn(cmock_retval) ListIntegrityVerify_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ListIntegrityVerify_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, S8_t cmock_to_return);
#define ListIntegrityVerify_ExpectAndReturn(list, cmock_retval) ListIntegrityVerify_CMockExpectAndReturn(__LINE__, list, cmock_retval)
void ListIntegrityVerify_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, LinkedList_t* list, S8_t cmock_to_return);
typedef S8_t (* CMOCK_ListIntegrityVerify_CALLBACK)(LinkedList_t* list, int cmock_num_calls);
void ListIntegrityVerify_StubWithCallback(CMOCK_ListIntegrityVerify_CALLBACK Callback);
#define ListIntegrityRestore_IgnoreAndReturn(cmock_retval) ListIntegrityRestore_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ListIntegrityRestore_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, OsResult_t cmock_to_return);
#define ListIntegrityRestore_ExpectAndReturn(list, list_verify_result, cmock_retval) ListIntegrityRestore_CMockExpectAndReturn(__LINE__, list, list_verify_result, cmock_retval)
void ListIntegrityRestore_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, LinkedList_t* list, S8_t list_verify_result, OsResult_t cmock_to_return);
typedef OsResult_t (* CMOCK_ListIntegrityRestore_CALLBACK)(LinkedList_t* list, S8_t list_verify_result, int cmock_num_calls);
void ListIntegrityRestore_StubWithCallback(CMOCK_ListIntegrityRestore_CALLBACK Callback);
#define ListPrintToBuffer_IgnoreAndReturn(cmock_retval) ListPrintToBuffer_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ListPrintToBuffer_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, char* cmock_to_return);
#define ListPrintToBuffer_ExpectAndReturn(list, buffer_size, cmock_retval) ListPrintToBuffer_CMockExpectAndReturn(__LINE__, list, buffer_size, cmock_retval)
void ListPrintToBuffer_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, LinkedList_t* list, U32_t* buffer_size, char* cmock_to_return);
typedef char* (* CMOCK_ListPrintToBuffer_CALLBACK)(LinkedList_t* list, U32_t* buffer_size, int cmock_num_calls);
void ListPrintToBuffer_StubWithCallback(CMOCK_ListPrintToBuffer_CALLBACK Callback);
#define ListNodeInit_IgnoreAndReturn(cmock_retval) ListNodeInit_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ListNodeInit_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, OsResult_t cmock_to_return);
#define ListNodeInit_ExpectAndReturn(node, child, cmock_retval) ListNodeInit_CMockExpectAndReturn(__LINE__, node, child, cmock_retval)
void ListNodeInit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, ListNode_t* node, void* child, OsResult_t cmock_to_return);
typedef OsResult_t (* CMOCK_ListNodeInit_CALLBACK)(ListNode_t* node, void* child, int cmock_num_calls);
void ListNodeInit_StubWithCallback(CMOCK_ListNodeInit_CALLBACK Callback);
#define ListNodeDeinit_IgnoreAndReturn(cmock_retval) ListNodeDeinit_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ListNodeDeinit_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, OsResult_t cmock_to_return);
#define ListNodeDeinit_ExpectAndReturn(list, node, cmock_retval) ListNodeDeinit_CMockExpectAndReturn(__LINE__, list, node, cmock_retval)
void ListNodeDeinit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, LinkedList_t* list, ListNode_t* node, OsResult_t cmock_to_return);
typedef OsResult_t (* CMOCK_ListNodeDeinit_CALLBACK)(LinkedList_t* list, ListNode_t* node, int cmock_num_calls);
void ListNodeDeinit_StubWithCallback(CMOCK_ListNodeDeinit_CALLBACK Callback);
#define ListNodeIdSet_IgnoreAndReturn(cmock_retval) ListNodeIdSet_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ListNodeIdSet_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, OsResult_t cmock_to_return);
#define ListNodeIdSet_ExpectAndReturn(node, id, cmock_retval) ListNodeIdSet_CMockExpectAndReturn(__LINE__, node, id, cmock_retval)
void ListNodeIdSet_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, ListNode_t* node, Id_t id, OsResult_t cmock_to_return);
typedef OsResult_t (* CMOCK_ListNodeIdSet_CALLBACK)(ListNode_t* node, Id_t id, int cmock_num_calls);
void ListNodeIdSet_StubWithCallback(CMOCK_ListNodeIdSet_CALLBACK Callback);
#define ListNodeLock_IgnoreAndReturn(cmock_retval) ListNodeLock_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ListNodeLock_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, OsResult_t cmock_to_return);
#define ListNodeLock_ExpectAndReturn(node, mode, cmock_retval) ListNodeLock_CMockExpectAndReturn(__LINE__, node, mode, cmock_retval)
void ListNodeLock_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, ListNode_t* node, U8_t mode, OsResult_t cmock_to_return);
typedef OsResult_t (* CMOCK_ListNodeLock_CALLBACK)(ListNode_t* node, U8_t mode, int cmock_num_calls);
void ListNodeLock_StubWithCallback(CMOCK_ListNodeLock_CALLBACK Callback);
#define ListNodeUnlock_IgnoreAndReturn(cmock_retval) ListNodeUnlock_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ListNodeUnlock_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, OsResult_t cmock_to_return);
#define ListNodeUnlock_ExpectAndReturn(node, cmock_retval) ListNodeUnlock_CMockExpectAndReturn(__LINE__, node, cmock_retval)
void ListNodeUnlock_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, ListNode_t* node, OsResult_t cmock_to_return);
typedef OsResult_t (* CMOCK_ListNodeUnlock_CALLBACK)(ListNode_t* node, int cmock_num_calls);
void ListNodeUnlock_StubWithCallback(CMOCK_ListNodeUnlock_CALLBACK Callback);
#define ListNodeAddAtPosition_IgnoreAndReturn(cmock_retval) ListNodeAddAtPosition_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ListNodeAddAtPosition_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, OsResult_t cmock_to_return);
#define ListNodeAddAtPosition_ExpectAndReturn(list, node, position, cmock_retval) ListNodeAddAtPosition_CMockExpectAndReturn(__LINE__, list, node, position, cmock_retval)
void ListNodeAddAtPosition_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, LinkedList_t* list, ListNode_t* node, U8_t position, OsResult_t cmock_to_return);
typedef OsResult_t (* CMOCK_ListNodeAddAtPosition_CALLBACK)(LinkedList_t* list, ListNode_t* node, U8_t position, int cmock_num_calls);
void ListNodeAddAtPosition_StubWithCallback(CMOCK_ListNodeAddAtPosition_CALLBACK Callback);
#define ListNodeAddAtNode_IgnoreAndReturn(cmock_retval) ListNodeAddAtNode_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ListNodeAddAtNode_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, OsResult_t cmock_to_return);
#define ListNodeAddAtNode_ExpectAndReturn(list, node_y, node_x, before_after, cmock_retval) ListNodeAddAtNode_CMockExpectAndReturn(__LINE__, list, node_y, node_x, before_after, cmock_retval)
void ListNodeAddAtNode_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, LinkedList_t* list, ListNode_t* node_y, ListNode_t* node_x, U8_t before_after, OsResult_t cmock_to_return);
typedef OsResult_t (* CMOCK_ListNodeAddAtNode_CALLBACK)(LinkedList_t* list, ListNode_t* node_y, ListNode_t* node_x, U8_t before_after, int cmock_num_calls);
void ListNodeAddAtNode_StubWithCallback(CMOCK_ListNodeAddAtNode_CALLBACK Callback);
#define ListNodeAddSorted_IgnoreAndReturn(cmock_retval) ListNodeAddSorted_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ListNodeAddSorted_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, OsResult_t cmock_to_return);
#define ListNodeAddSorted_ExpectAndReturn(list, node, cmock_retval) ListNodeAddSorted_CMockExpectAndReturn(__LINE__, list, node, cmock_retval)
void ListNodeAddSorted_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, LinkedList_t* list, ListNode_t* node, OsResult_t cmock_to_return);
typedef OsResult_t (* CMOCK_ListNodeAddSorted_CALLBACK)(LinkedList_t* list, ListNode_t* node, int cmock_num_calls);
void ListNodeAddSorted_StubWithCallback(CMOCK_ListNodeAddSorted_CALLBACK Callback);
#define ListNodeRemove_IgnoreAndReturn(cmock_retval) ListNodeRemove_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ListNodeRemove_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, ListNode_t* cmock_to_return);
#define ListNodeRemove_ExpectAndReturn(list, node, cmock_retval) ListNodeRemove_CMockExpectAndReturn(__LINE__, list, node, cmock_retval)
void ListNodeRemove_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, LinkedList_t* list, ListNode_t* node, ListNode_t* cmock_to_return);
typedef ListNode_t* (* CMOCK_ListNodeRemove_CALLBACK)(LinkedList_t* list, ListNode_t* node, int cmock_num_calls);
void ListNodeRemove_StubWithCallback(CMOCK_ListNodeRemove_CALLBACK Callback);
#define ListNodeRemoveFromHead_IgnoreAndReturn(cmock_retval) ListNodeRemoveFromHead_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ListNodeRemoveFromHead_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, ListNode_t* cmock_to_return);
#define ListNodeRemoveFromHead_ExpectAndReturn(list, cmock_retval) ListNodeRemoveFromHead_CMockExpectAndReturn(__LINE__, list, cmock_retval)
void ListNodeRemoveFromHead_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, LinkedList_t* list, ListNode_t* cmock_to_return);
typedef ListNode_t* (* CMOCK_ListNodeRemoveFromHead_CALLBACK)(LinkedList_t* list, int cmock_num_calls);
void ListNodeRemoveFromHead_StubWithCallback(CMOCK_ListNodeRemoveFromHead_CALLBACK Callback);
#define ListNodeRemoveFromTail_IgnoreAndReturn(cmock_retval) ListNodeRemoveFromTail_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ListNodeRemoveFromTail_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, ListNode_t* cmock_to_return);
#define ListNodeRemoveFromTail_ExpectAndReturn(list, cmock_retval) ListNodeRemoveFromTail_CMockExpectAndReturn(__LINE__, list, cmock_retval)
void ListNodeRemoveFromTail_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, LinkedList_t* list, ListNode_t* cmock_to_return);
typedef ListNode_t* (* CMOCK_ListNodeRemoveFromTail_CALLBACK)(LinkedList_t* list, int cmock_num_calls);
void ListNodeRemoveFromTail_StubWithCallback(CMOCK_ListNodeRemoveFromTail_CALLBACK Callback);
#define ListNodePeek_IgnoreAndReturn(cmock_retval) ListNodePeek_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ListNodePeek_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, ListNode_t* cmock_to_return);
#define ListNodePeek_ExpectAndReturn(list, position, cmock_retval) ListNodePeek_CMockExpectAndReturn(__LINE__, list, position, cmock_retval)
void ListNodePeek_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, LinkedList_t* list, U8_t position, ListNode_t* cmock_to_return);
typedef ListNode_t* (* CMOCK_ListNodePeek_CALLBACK)(LinkedList_t* list, U8_t position, int cmock_num_calls);
void ListNodePeek_StubWithCallback(CMOCK_ListNodePeek_CALLBACK Callback);
#define ListNodePeekNext_IgnoreAndReturn(cmock_retval) ListNodePeekNext_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ListNodePeekNext_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, ListNode_t* cmock_to_return);
#define ListNodePeekNext_ExpectAndReturn(node, cmock_retval) ListNodePeekNext_CMockExpectAndReturn(__LINE__, node, cmock_retval)
void ListNodePeekNext_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, ListNode_t* node, ListNode_t* cmock_to_return);
typedef ListNode_t* (* CMOCK_ListNodePeekNext_CALLBACK)(ListNode_t* node, int cmock_num_calls);
void ListNodePeekNext_StubWithCallback(CMOCK_ListNodePeekNext_CALLBACK Callback);
#define ListNodePeekPrev_IgnoreAndReturn(cmock_retval) ListNodePeekPrev_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ListNodePeekPrev_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, ListNode_t* cmock_to_return);
#define ListNodePeekPrev_ExpectAndReturn(node, cmock_retval) ListNodePeekPrev_CMockExpectAndReturn(__LINE__, node, cmock_retval)
void ListNodePeekPrev_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, ListNode_t* node, ListNode_t* cmock_to_return);
typedef ListNode_t* (* CMOCK_ListNodePeekPrev_CALLBACK)(ListNode_t* node, int cmock_num_calls);
void ListNodePeekPrev_StubWithCallback(CMOCK_ListNodePeekPrev_CALLBACK Callback);
#define ListNodeHasNext_IgnoreAndReturn(cmock_retval) ListNodeHasNext_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ListNodeHasNext_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, _Bool cmock_to_return);
#define ListNodeHasNext_ExpectAndReturn(node, cmock_retval) ListNodeHasNext_CMockExpectAndReturn(__LINE__, node, cmock_retval)
void ListNodeHasNext_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, ListNode_t* node, _Bool cmock_to_return);
typedef _Bool (* CMOCK_ListNodeHasNext_CALLBACK)(ListNode_t* node, int cmock_num_calls);
void ListNodeHasNext_StubWithCallback(CMOCK_ListNodeHasNext_CALLBACK Callback);
#define ListNodeHasPrev_IgnoreAndReturn(cmock_retval) ListNodeHasPrev_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ListNodeHasPrev_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, _Bool cmock_to_return);
#define ListNodeHasPrev_ExpectAndReturn(node, cmock_retval) ListNodeHasPrev_CMockExpectAndReturn(__LINE__, node, cmock_retval)
void ListNodeHasPrev_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, ListNode_t* node, _Bool cmock_to_return);
typedef _Bool (* CMOCK_ListNodeHasPrev_CALLBACK)(ListNode_t* node, int cmock_num_calls);
void ListNodeHasPrev_StubWithCallback(CMOCK_ListNodeHasPrev_CALLBACK Callback);
#define ListNodeMove_IgnoreAndReturn(cmock_retval) ListNodeMove_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ListNodeMove_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, OsResult_t cmock_to_return);
#define ListNodeMove_ExpectAndReturn(list_x, list_y, node, cmock_retval) ListNodeMove_CMockExpectAndReturn(__LINE__, list_x, list_y, node, cmock_retval)
void ListNodeMove_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, LinkedList_t* list_x, LinkedList_t* list_y, ListNode_t* node, OsResult_t cmock_to_return);
typedef OsResult_t (* CMOCK_ListNodeMove_CALLBACK)(LinkedList_t* list_x, LinkedList_t* list_y, ListNode_t* node, int cmock_num_calls);
void ListNodeMove_StubWithCallback(CMOCK_ListNodeMove_CALLBACK Callback);
#define ListNodeSwap_IgnoreAndReturn(cmock_retval) ListNodeSwap_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ListNodeSwap_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, OsResult_t cmock_to_return);
#define ListNodeSwap_ExpectAndReturn(list, node_x, node_y, cmock_retval) ListNodeSwap_CMockExpectAndReturn(__LINE__, list, node_x, node_y, cmock_retval)
void ListNodeSwap_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, LinkedList_t* list, ListNode_t* node_x, ListNode_t* node_y, OsResult_t cmock_to_return);
typedef OsResult_t (* CMOCK_ListNodeSwap_CALLBACK)(LinkedList_t* list, ListNode_t* node_x, ListNode_t* node_y, int cmock_num_calls);
void ListNodeSwap_StubWithCallback(CMOCK_ListNodeSwap_CALLBACK Callback);
#define ListNodeChildFromId_IgnoreAndReturn(cmock_retval) ListNodeChildFromId_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ListNodeChildFromId_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, void* cmock_to_return);
#define ListNodeChildFromId_ExpectAndReturn(list, id, cmock_retval) ListNodeChildFromId_CMockExpectAndReturn(__LINE__, list, id, cmock_retval)
void ListNodeChildFromId_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, LinkedList_t* list, Id_t id, void* cmock_to_return);
typedef void* (* CMOCK_ListNodeChildFromId_CALLBACK)(LinkedList_t* list, Id_t id, int cmock_num_calls);
void ListNodeChildFromId_StubWithCallback(CMOCK_ListNodeChildFromId_CALLBACK Callback);
#define ListNodeChildGet_IgnoreAndReturn(cmock_retval) ListNodeChildGet_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ListNodeChildGet_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, void* cmock_to_return);
#define ListNodeChildGet_ExpectAndReturn(node, cmock_retval) ListNodeChildGet_CMockExpectAndReturn(__LINE__, node, cmock_retval)
void ListNodeChildGet_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, ListNode_t* node, void* cmock_to_return);
typedef void* (* CMOCK_ListNodeChildGet_CALLBACK)(ListNode_t* node, int cmock_num_calls);
void ListNodeChildGet_StubWithCallback(CMOCK_ListNodeChildGet_CALLBACK Callback);
#define ListNodeChildSet_IgnoreAndReturn(cmock_retval) ListNodeChildSet_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ListNodeChildSet_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, OsResult_t cmock_to_return);
#define ListNodeChildSet_ExpectAndReturn(node, child, cmock_retval) ListNodeChildSet_CMockExpectAndReturn(__LINE__, node, child, cmock_retval)
void ListNodeChildSet_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, ListNode_t* node, void* child, OsResult_t cmock_to_return);
typedef OsResult_t (* CMOCK_ListNodeChildSet_CALLBACK)(ListNode_t* node, void* child, int cmock_num_calls);
void ListNodeChildSet_StubWithCallback(CMOCK_ListNodeChildSet_CALLBACK Callback);
#define ListNodeIdGet_IgnoreAndReturn(cmock_retval) ListNodeIdGet_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ListNodeIdGet_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, Id_t cmock_to_return);
#define ListNodeIdGet_ExpectAndReturn(node, cmock_retval) ListNodeIdGet_CMockExpectAndReturn(__LINE__, node, cmock_retval)
void ListNodeIdGet_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, ListNode_t* node, Id_t cmock_to_return);
typedef Id_t (* CMOCK_ListNodeIdGet_CALLBACK)(ListNode_t* node, int cmock_num_calls);
void ListNodeIdGet_StubWithCallback(CMOCK_ListNodeIdGet_CALLBACK Callback);
#define ListNodeIsInList_IgnoreAndReturn(cmock_retval) ListNodeIsInList_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ListNodeIsInList_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, _Bool cmock_to_return);
#define ListNodeIsInList_ExpectAndReturn(list, node, cmock_retval) ListNodeIsInList_CMockExpectAndReturn(__LINE__, list, node, cmock_retval)
void ListNodeIsInList_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, LinkedList_t* list, ListNode_t* node, _Bool cmock_to_return);
typedef _Bool (* CMOCK_ListNodeIsInList_CALLBACK)(LinkedList_t* list, ListNode_t* node, int cmock_num_calls);
void ListNodeIsInList_StubWithCallback(CMOCK_ListNodeIsInList_CALLBACK Callback);
#define ListIteratorInit_IgnoreAndReturn(cmock_retval) ListIteratorInit_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ListIteratorInit_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, OsResult_t cmock_to_return);
#define ListIteratorInit_ExpectAndReturn(list_it, list, it_direction, cmock_retval) ListIteratorInit_CMockExpectAndReturn(__LINE__, list_it, list, it_direction, cmock_retval)
void ListIteratorInit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct ListIterator* list_it, LinkedList_t* list, U8_t it_direction, OsResult_t cmock_to_return);
typedef OsResult_t (* CMOCK_ListIteratorInit_CALLBACK)(struct ListIterator* list_it, LinkedList_t* list, U8_t it_direction, int cmock_num_calls);
void ListIteratorInit_StubWithCallback(CMOCK_ListIteratorInit_CALLBACK Callback);
#define ListIteratorNext_IgnoreAndReturn(cmock_retval) ListIteratorNext_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ListIteratorNext_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, ListNode_t* cmock_to_return);
#define ListIteratorNext_ExpectAndReturn(list_it, cmock_retval) ListIteratorNext_CMockExpectAndReturn(__LINE__, list_it, cmock_retval)
void ListIteratorNext_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct ListIterator* list_it, ListNode_t* cmock_to_return);
typedef ListNode_t* (* CMOCK_ListIteratorNext_CALLBACK)(struct ListIterator* list_it, int cmock_num_calls);
void ListIteratorNext_StubWithCallback(CMOCK_ListIteratorNext_CALLBACK Callback);
#define ListIteratorPrev_IgnoreAndReturn(cmock_retval) ListIteratorPrev_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ListIteratorPrev_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, ListNode_t* cmock_to_return);
#define ListIteratorPrev_ExpectAndReturn(list_it, cmock_retval) ListIteratorPrev_CMockExpectAndReturn(__LINE__, list_it, cmock_retval)
void ListIteratorPrev_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct ListIterator* list_it, ListNode_t* cmock_to_return);
typedef ListNode_t* (* CMOCK_ListIteratorPrev_CALLBACK)(struct ListIterator* list_it, int cmock_num_calls);
void ListIteratorPrev_StubWithCallback(CMOCK_ListIteratorPrev_CALLBACK Callback);
#define ListIteratorEnd_IgnoreAndReturn(cmock_retval) ListIteratorEnd_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ListIteratorEnd_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, _Bool cmock_to_return);
#define ListIteratorEnd_ExpectAndReturn(list_it, cmock_retval) ListIteratorEnd_CMockExpectAndReturn(__LINE__, list_it, cmock_retval)
void ListIteratorEnd_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct ListIterator* list_it, _Bool cmock_to_return);
typedef _Bool (* CMOCK_ListIteratorEnd_CALLBACK)(struct ListIterator* list_it, int cmock_num_calls);
void ListIteratorEnd_StubWithCallback(CMOCK_ListIteratorEnd_CALLBACK Callback);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
